import {
  SignIn,
  SignInButton,
  SignOutButton,
  useUser,
} from "@clerk/clerk-react";
import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import router, { useRouter } from "next/router";
import { useSession } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
dayjs.extend(relativeTime);
//uses outputs of tRPC router as type for this component
//get the type exported from tRPC from posts getAll query and number specifies we only want 1
type PostWithUser = RouterOutputs["posts"]["getAll"][number];

export const PostView = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <div className="flex gap-3 p-4 border-b border-slate-400" key={post.id}>
      <Image
        src={author.profilePicture}
        className="rounded-full h-14 w-14"
        alt={`@${author.username}'s Profile picture`}
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex gap-1 font-bold text-slate-300">
          <span>{`@${author?.username}`}</span>
          <span className="font-thin">{` â€¢ ${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </div>
        {post.content}
      </div>
    </div>
  );
};

export const CreatePostWizard = () => {
  const { user } = useUser();

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <img
        className="rounded-full h-14 w-14"
        src={user.profileImageUrl}
        alt="Profile Image"
      />
      <input
        className="p-2 bg-transparent outline-none grow"
        placeholder="Speak your truth!"
      />
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading, error } = api.posts.getAll.useQuery();

  if (postsLoading) {
    return (
      <>
        <LoadingPage />
      </>
    );
  }

  if (!data) return <div>Something went wrong...</div>;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { user, isLoaded: userLoaded, isSignedIn } = useUser();
  console.log("soft reload");

  //this code runs on user's device while the tRPC router code it calls runs on our servers
  //start fetching asap - thanks to react query, you only need to fetch data once and then subsequent fetches can access the cached data
  api.posts.getAll.useQuery();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center h-screen">
        {/* div is full width unless we are > threshold for md */}
        <div className="w-full h-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex p-4 border-b-2 border-slate-400">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {!!isSignedIn && (
              <>
                <CreatePostWizard />
                <SignOutButton />
              </>
            )}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
